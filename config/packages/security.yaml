security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
        App\Entity\User:
            algorithm: auto
    providers:
        auth_token_user_provider:
            id: App\Security\AuthTokenUserProvider

        in_database:
            entity:
                class: App\Entity\User
                property: username

        api_key_user_provider:
            id: App\Security\ApiKeyUserProvider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern:  ^/api/login
            stateless: true
            anonymous: true
            provider: in_database
            json_login:
                check_path:               /api/login
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern:   ^/api
            stateless: true
            anonymous: true
            simple_preauth:
                authenticator: App\Security\ApiKeyAuthenticator
            provider: api_key_user_provider
            #simple_preauth:
                #authenticator: App\Security\AuthTokenAuthenticator
            # provider: auth_token_user_provider

            #guard:
            #simple_preauth:
                #authenticator:
                   # - lexik_jwt_authentication.jwt_token_authenticator
                     #- App\Security\TokenAuthenticator
            #provider: in_database

            user_checker: App\Service\UserEnabledChecker

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
          - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
          - { path: ^/api/users, roles: IS_AUTHENTICATED_ANONYMOUSLY }
          - { path: ^/api/registration, roles: IS_AUTHENTICATED_ANONYMOUSLY }
          - { path: ^/api/token/refresh, roles: IS_AUTHENTICATED_ANONYMOUSLY }
          - { path: ^/api/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
          - { path: ^/api/homes, roles: IS_AUTHENTICATED_ANONYMOUSLY }
          - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }

